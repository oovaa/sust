 -- PostgreSQL Commands to Create Clinic Appointment Management System Database and Tables-- Table: SpecialtiesCREATE TABLE  Specialties (    specialty_id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE  );COMMENT  ON TABLE Specialties IS 'Defines medical specialties.';-- Table: PatientsCREATE TABLE  Patients (    patient_id SERIAL PRIMARY KEY,    first_name VARCHAR(50) NOT NULL,    last_name VARCHAR(50) NOT NULL,    phone_number VARCHAR(15) UNIQUE,    email VARCHAR(100) UNIQUE,    birthdate DATE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  );COMMENT  ON TABLE Patients IS 'Stores patient information.';COMMENT  ON COLUMN Patients.birthdate IS 'Patient''s date of birth.';-- Table: DoctorsCREATE TABLE  Doctors (    doctor_id SERIAL PRIMARY KEY,    first_name VARCHAR(50) NOT NULL,    last_name VARCHAR(50) NOT NULL,    specialty_id INT NOT NULL,    license_number VARCHAR(50) NOT NULL UNIQUE,    phone_number VARCHAR(15) UNIQUE,    email VARCHAR(100) UNIQUE,    FOREIGN KEY (specialty_id) REFERENCES Specialties (specialty_id)  );COMMENT  ON TABLE Doctors IS 'Stores doctor information.';COMMENT  ON COLUMN Doctors.license_number IS 'Unique medical license number for the doctor.';-- Table: AppointmentsCREATE TABLE  Appointments (    appointment_id SERIAL PRIMARY KEY,    patient_id INT NOT NULL,    doctor_id INT NOT NULL,    appointment_date DATE NOT NULL,    appointment_time TIME NOT NULL,    status VARCHAR(20) DEFAULT 'Scheduled' CHECK (      status IN ('Scheduled', 'Completed', 'Cancelled', 'No-Show')    ),    FOREIGN KEY (patient_id) REFERENCES Patients (patient_id),    FOREIGN KEY (doctor_id) REFERENCES Doctors (doctor_id)  );COMMENT  ON TABLE Appointments IS 'Schedules appointments between patients and doctors.';-- Table: MedicationsCREATE TABLE  Medications (    medication_id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    price DECIMAL(10, 2) NOT NULL CHECK (price >= 0)  );COMMENT  ON TABLE Medications IS 'Stores details about medications.';-- Table: PrescriptionsCREATE TABLE  Prescriptions (    prescription_id SERIAL PRIMARY KEY,    appointment_id INT NOT NULL,    medication_id INT NOT NULL,    quantity INT NOT NULL CHECK (quantity > 0),    instructions TEXT,    FOREIGN KEY (appointment_id) REFERENCES Appointments (appointment_id),    FOREIGN KEY (medication_id) REFERENCES Medications (medication_id)  );COMMENT  ON TABLE Prescriptions IS 'Records prescriptions issued during appointments.';-- Table: InvoicesCREATE TABLE  Invoices (    invoice_id SERIAL PRIMARY KEY,    appointment_id INT NOT NULL UNIQUE,    amount DECIMAL(10, 2) NOT NULL CHECK (amount >= 0),    status VARCHAR(20) DEFAULT 'Pending' CHECK (      status IN ('Pending', 'Paid', 'Cancelled', 'Refunded')    ),    issue_date DATE NOT NULL DEFAULT CURRENT_DATE,    FOREIGN KEY (appointment_id) REFERENCES Appointments (appointment_id)  );COMMENT  ON TABLE Invoices IS 'Stores billing information for appointments.';