 -- 3. Data Retrieval and Queries--  List all patientsSELECT  *from  patients;--  List all doctors with their specialtiesselect  d.*,  s.name as specialtyfrom  doctors d  join specialties s on d.specialty_id = s.specialty_id;--  Display all appointments with patient name, doctor name, and appointment dateselect  a.appointment_date, a.appointment_time,  p.first_name || ' ' || p.last_name as patient_name,  d.first_name || ' ' || d.last_name as doctor_namefrom  appointments a  join patients p on a.patient_id = p.patient_id  join doctors d on a.doctor_id = d.doctor_id;--   Filtered and Sorted Queries:--  Show appointments on a specific dateselect  *from  appointments awhere  EXTRACT(    day    from      appointment_date  ) = '8';--  List patients registered after a specific year (i will user BD here)select  *from  patients pwhere  extract(    year    from      birthdate  ) > 2000;--  Sort doctors by name or by specialtyselect  d.first_name,  s.namefrom  doctors d  join specialties s on d.specialty_id = s.specialty_idorder by  d.first_name,  s.name asc;-- Queries Using Functions:--  Display patient names in uppercaseselect  upper(patients.first_name)from  patients;--  Calculate patient age from birthdateSELECT  AGE (patients.birthdate)from  patients;--  Format the appointment date clearlyselect  patients.first_name || ' ' || patients.last_name as patient_name,  doctors.first_name || ' ' || doctors.last_name as doctor_name,  appointments.appointment_date,  appointments.appointment_time,  appointments.statusfrom  patients  join appointments on patients.patient_id = appointments.patient_id  join doctors on doctors.doctor_id = appointments.doctor_id;-- Analytical Queries:-- Count appointments per doctordSELECT  doctors.first_name,  COUNT(appointments.patient_id) as total_appointmentsfrom  appointments  join doctors on appointments.doctor_id = doctors.doctor_idGROUP BY  doctors.doctor_id,  doctors.first_name;-- Calculate total payments per patientselect  patients.first_name,  sum(invoices.amount) as totalfrom  patients  join appointments on patients.patient_id = appointments.patient_id  join invoices on invoices.appointment_id = appointments.appointment_idGROUP by  patients.first_name;-- Count total registered patientsselect  count(*)from  appointments;--   Multi-table Queries:--  Show appointment details including doctor and patient namesselect  patients.first_name || ' ' || patients.last_name as patient_name,  doctors.first_name || ' ' || doctors.last_name AS doctor_name,  appointments.appointment_date,  appointments.appointment_time,  appointments.statusfrom  patients  join appointments on appointments.patient_id = patients.patient_id  join doctors on doctors.doctor_id = appointments.doctor_id;--  List prescriptions with patient and medication namesselect  p.first_name || ' ' || p.last_name as patient_name,  m.name AS medication_name,  pr.instructionsfrom  patients p  join appointments a on p.patient_id = a.patient_id  join prescriptions pr on pr.appointment_id = a.appointment_id  join medications m on pr.medication_id = m.medication_id;--   Advanced Queries:-- Show patients with more than 3 appointmentsSELECT  patients.first_name || ' ' || patients.last_name as patient_namefrom  patients  join appointments on appointments.patient_id = patients.patient_idGROUP BY  patients.patient_id,  patients.first_name,  patients.last_nameHAVING  count(appointments.appointment_id) > 3ORDER by  patients.patient_id;-- Show doctors with no appointments this week  -- add a new doc firstselect doctors.doctor_id, doctors.first_name  --, COUNT(appointments.appointment_id)from  doctors  LEFT join appointments on appointments.doctor_id = doctors.doctor_idGROUP by  doctors.doctor_id,  doctors.first_nameHAVING  count(appointments.appointment_id) = 0;-- Show patients who visited more than one doctor and received prescriptions -- add apointmentselect  patients.patient_id,  patients.first_name,  COUNT(DISTINCT appointments.doctor_id) as visits_number,  COUNT(prescriptions.prescription_id) prescriptions_count --, appointments.doctor_idfrom  appointments  JOIN patients on patients.patient_id = appointments.patient_id  left join prescriptions on appointments.appointment_id = prescriptions.appointment_idGROUP BY  patients.patient_id,  patients.first_nameHAVING  COUNT(DISTINCT appointments.doctor_id) > 1  and COUNT(prescriptions.prescription_id) > 0;-- Show patients who never received a prescriptionselect  patients.patient_id,  patients.first_namefrom  patients  join appointments on patients.patient_id = appointments.patient_id  LEFT JOIN prescriptions on prescriptions.appointment_id = appointments.appointment_idGROUP BY  patients.patient_id,  patients.first_nameHAVING  count(prescriptions.prescription_id) = 0;--   4. Data Management Features-- o View: that displays today’s appointments with doctor and patient namesCREATE VIEW  today as (    select      doctors.first_name as doctors,      patients.first_name as patients    from      patients      JOIN appointments on appointments.patient_id = patients.patient_id      JOIN doctors on appointments.doctor_id = doctors.doctor_id  );SELECT  *from  today;-- o Sequence: to auto-generate values (e.g., invoice number or patient ID)CREATE SEQUENCE  seq startWith  1 INCREMENT by 2 no MAXVALUE no CYCLE;SELECT  NEXTval('seq');-- CREATE TABLE CustomInvoices (--     invoice_id INT PRIMARY KEY DEFAULT NEXTVAL('seq'), -- Using your custom sequence here--     patient_id INT NOT NULL,--     amount DECIMAL(10, 2) NOT NULL,--     issue_date DATE DEFAULT CURRENT_DATE--     -- ... other columns and foreign keys-- );-- o Index: on doctor name or patient number to improve query performanceEXPLAINANALYZESELECT  doctors.first_nameFROM  doctorswhere  doctors.doctor_id = 2;create INDEX  d_name on doctors (first_name);